speller.c logic:
1 load dictionary into memory
2 read words by appending every character and put them to word and than check if it is in dictonary:
	1 open text
	2 read in while loop every character that is alphabetical and save it in char word[]
	3 if it's the end of a string set nul character with proper index to this word to get whole word to compare
	4 use check function to compare this word with dictionary:
	bool misspelled = !check(word);
		check function return true if word is in dictonary
		we need opossite to find misspelling
		so, if word isn't in dictionnery bool misspelled = !check(word) misspelled is now true - !(false) = true;

PS5 SOLUTION:
1. load function
	- add word variable as a buffer
	- open a file
	- call fscanf to read all the words in dictionary while != EOF
			every time geto on the loop update words counter to keep track how many words are in dictionarie
	- allocate n (node) to store every word in n->word (node)
	- copy word (string) to node (n->word)
	- insert node to hash table (head of a list)
			int index = hash(word);
    		n->next = table[index]; /* don't lose connection to prevoius node*/
    		table[index] = n;

2. check function:
	- call hash function to return index at the hash map array
	-  create a cursor to travers elements in a list
				strcasecmp(cursor->word, word) - compare word from text to word from dictionary
				if not found (not return 0)
				update cursor to travers it's next element
				cursor = cursor->next

3. unload
	- iterate hash map - table[0 - 25];
	- create 2 extra variable:
		-cursor - poining to cursor->next
		- tmp - pointing to first element of the list
		the trick is that cursor is poining to next node than we can free(tmp) without loosing connection
	
